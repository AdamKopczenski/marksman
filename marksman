#! /usr/bin/ruby

require_relative 'lib/game'

# $options = {:interactive => true}

def screen_width
  #TODO Consider a more robust solution for other platforms.
  return `tput cols`.to_i
end

def wrap_string(s, cols)
  result = ''
  remainder = s
  while remainder.uncolorize.length > cols do
    spaces_till_break = remainder.uncolorize[0..cols].count(' ')
    split_string = remainder.split(' ')
    result += split_string[0...spaces_till_break].join(' ') + "\n"
    remainder = split_string[spaces_till_break..-1].join(' ')
  end
  result += remainder
  return result
end

def play_interactive(game_object)
  puts wrap_string(game_object.current_board, screen_width)
  guess_counter = 0
  while !game_object.victory?
    guess_counter += 1
    print "Guess \##{guess_counter}: "
    current_guess = gets.chomp
    game_object.process_guess(current_guess)
    if game_object.last_guess_successful then
      puts "All letters from \"#{current_guess}\" in answer!"
    else
      puts "Not all letters from \"#{current_guess}\" in answer."
    end
    puts wrap_string(game_object.current_board, screen_width)

  end
  puts "You won in #{guess_counter} guesses!"
end

the_game = Game::new
play_interactive(the_game)
